{"version":3,"sources":["frontend.products.js","jquery.twbsPagination.js"],"names":[],"mappingsfile":"products.js","sourcesContent":["","/*!\n * jQuery pagination plugin v1.4\n * http://esimakin.github.io/twbs-pagination/\n *\n * Copyright 2014-2015, Eugene Simakin\n * Released under Apache 2.0 license\n * http://apache.org/licenses/LICENSE-2.0.html\n */\n(function ($, window, document, undefined) {\n\n    'use strict';\n\n    var old = $.fn.twbsPagination;\n\n    // PROTOTYPE AND CONSTRUCTOR\n\n    var TwbsPagination = function (element, options) {\n        this.$element = $(element);\n        this.options = $.extend({}, $.fn.twbsPagination.defaults, options);\n\n        if (this.options.startPage < 1 || this.options.startPage > this.options.totalPages) {\n            throw new Error('Start page option is incorrect');\n        }\n\n        this.options.totalPages = parseInt(this.options.totalPages);\n        if (isNaN(this.options.totalPages)) {\n            throw new Error('Total pages option is not correct!');\n        }\n\n        this.options.visiblePages = parseInt(this.options.visiblePages);\n        if (isNaN(this.options.visiblePages)) {\n            throw new Error('Visible pages option is not correct!');\n        }\n\n        if (this.options.totalPages < this.options.visiblePages) {\n            this.options.visiblePages = this.options.totalPages;\n        }\n\n        if (this.options.onPageClick instanceof Function) {\n            this.$element.first().on('page', this.options.onPageClick);\n        }\n\n        if (this.options.href) {\n            var match, regexp = this.options.href.replace(/[-\\/\\\\^$*+?.|[\\]]/g, '\\\\$&');\n            regexp = regexp.replace(this.options.pageVariable, '(\\\\d+)');\n            if ((match = new RegExp(regexp, 'i').exec(window.location.href)) != null) {\n                this.options.startPage = parseInt(match[1], 10);\n            }\n        }\n\n        var tagName = (typeof this.$element.prop === 'function') ?\n            this.$element.prop('tagName') : this.$element.attr('tagName');\n\n        if (tagName === 'UL') {\n            this.$listContainer = this.$element;\n        } else {\n            this.$listContainer = $('<ul></ul>');\n        }\n\n        this.$listContainer.addClass(this.options.paginationClass);\n\n        if (tagName !== 'UL') {\n            this.$element.append(this.$listContainer);\n        }\n\n        if (this.options.initiateStartPageClick) {\n            this.show(this.options.startPage);\n        } else {\n            this.render(this.getPages(this.options.startPage));\n            this.setupEvents();\n        }\n\n        return this;\n    };\n\n    TwbsPagination.prototype = {\n\n        constructor: TwbsPagination,\n\n        destroy: function () {\n            this.$element.empty();\n            this.$element.removeData('twbs-pagination');\n            this.$element.off('page');\n\n            return this;\n        },\n\n        show: function (page) {\n            if (page < 1 || page > this.options.totalPages) {\n                throw new Error('Page is incorrect.');\n            }\n\n            this.render(this.getPages(page));\n            this.setupEvents();\n\n            this.$element.trigger('page', page);\n\n            return this;\n        },\n\n        buildListItems: function (pages) {\n            var listItems = [];\n\n            // Add \"first\" page button\n            if (this.options.first) {\n                listItems.push(this.buildItem('first', 1));\n            }\n            // Add \"previous\" page button\n            if (this.options.prev) {\n                var prev = pages.currentPage > 1 ? pages.currentPage - 1 : this.options.loop ? this.options.totalPages  : 1;\n                listItems.push(this.buildItem('prev', prev));\n            }\n            // Add \"pages\"\n            for (var i = 0; i < pages.numeric.length; i++) {\n                listItems.push(this.buildItem('page', pages.numeric[i]));\n            }\n            // Add \"next\" page button\n            if (this.options.next) {\n                var next = pages.currentPage < this.options.totalPages ? pages.currentPage + 1 : this.options.loop ? 1 : this.options.totalPages;\n                listItems.push(this.buildItem('next', next));\n            }\n            // Add \"last\" page button\n            if (this.options.last) {\n                listItems.push(this.buildItem('last', this.options.totalPages));\n            }\n\n            return listItems;\n        },\n\n        buildItem: function (type, page) {\n            var $itemContainer = $('<li></li>'),\n                $itemContent = $('<a></a>'),\n                itemText = null;\n\n            itemText = this.options[type] ? this.makeText(this.options[type], page) : page;\n            $itemContainer.addClass(this.options[type + 'Class']);\n            $itemContainer.data('page', page);\n            $itemContainer.data('page-type', type);\n            $itemContainer.append($itemContent.attr('href', this.makeHref(page)).addClass(this.options.anchorClass).html(itemText));\n\n            return $itemContainer;\n        },\n\n        getPages: function (currentPage) {\n            var pages = [];\n\n            var half = Math.floor(this.options.visiblePages / 2);\n            var start = currentPage - half + 1 - this.options.visiblePages % 2;\n            var end = currentPage + half;\n\n            // handle boundary case\n            if (start <= 0) {\n                start = 1;\n                end = this.options.visiblePages;\n            }\n            if (end > this.options.totalPages) {\n                start = this.options.totalPages - this.options.visiblePages + 1;\n                end = this.options.totalPages;\n            }\n\n            var itPage = start;\n            while (itPage <= end) {\n                pages.push(itPage);\n                itPage++;\n            }\n\n            return {\"currentPage\": currentPage, \"numeric\": pages};\n        },\n\n        render: function (pages) {\n            var _this = this;\n            this.$listContainer.children().remove();\n            var items = this.buildListItems(pages);\n            jQuery.each(items, function(key, item){\n                _this.$listContainer.append(item);\n            });\n\n            this.$listContainer.children().each(function () {\n                var $this = $(this),\n                    pageType = $this.data('page-type');\n\n                switch (pageType) {\n                    case 'page':\n                        if ($this.data('page') === pages.currentPage) {\n                            $this.addClass(_this.options.activeClass);\n                        }\n                        break;\n                    case 'first':\n                            $this.toggleClass(_this.options.disabledClass, pages.currentPage === 1);\n                        break;\n                    case 'last':\n                            $this.toggleClass(_this.options.disabledClass, pages.currentPage === _this.options.totalPages);\n                        break;\n                    case 'prev':\n                            $this.toggleClass(_this.options.disabledClass, !_this.options.loop && pages.currentPage === 1);\n                        break;\n                    case 'next':\n                            $this.toggleClass(_this.options.disabledClass,\n                                !_this.options.loop && pages.currentPage === _this.options.totalPages);\n                        break;\n                    default:\n                        break;\n                }\n\n            });\n        },\n\n        setupEvents: function () {\n            var _this = this;\n            this.$listContainer.find('li').each(function () {\n                var $this = $(this);\n                $this.off();\n                if ($this.hasClass(_this.options.disabledClass) || $this.hasClass(_this.options.activeClass)) {\n                    $this.on('click', false);\n                    return;\n                }\n                $this.click(function (evt) {\n                    // Prevent click event if href is not set.\n                    !_this.options.href && evt.preventDefault();\n                    _this.show(parseInt($this.data('page')));\n                });\n            });\n        },\n\n        makeHref: function (page) {\n            return this.options.href ? this.makeText(this.options.href, page) : \"#\";\n        },\n\n        makeText: function (text, page) {\n            return text.replace(this.options.pageVariable, page)\n                .replace(this.options.totalPagesVariable, this.options.totalPages)\n        }\n\n    };\n\n    // PLUGIN DEFINITION\n\n    $.fn.twbsPagination = function (option) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        var methodReturn;\n\n        var $this = $(this);\n        var data = $this.data('twbs-pagination');\n        var options = typeof option === 'object' ? option : {};\n\n        if (!data) $this.data('twbs-pagination', (data = new TwbsPagination(this, options) ));\n        if (typeof option === 'string') methodReturn = data[ option ].apply(data, args);\n\n        return ( methodReturn === undefined ) ? $this : methodReturn;\n    };\n\n    $.fn.twbsPagination.defaults = {\n        totalPages: 1,\n        startPage: 1,\n        visiblePages: 5,\n        initiateStartPageClick: true,\n        href: false,\n        pageVariable: '{{page}}',\n        totalPagesVariable: '{{total_pages}}',\n        page: null,\n        first: 'First',\n        prev: 'Previous',\n        next: 'Next',\n        last: 'Last',\n        loop: false,\n        onPageClick: null,\n        paginationClass: 'pagination',\n        nextClass: 'next',\n        prevClass: 'prev',\n        lastClass: 'last',\n        firstClass: 'first',\n        pageClass: 'page',\n        activeClass: 'active',\n        disabledClass: 'disabled',\n        anchorClass: 'page-link'\n    };\n\n    $.fn.twbsPagination.Constructor = TwbsPagination;\n\n    $.fn.twbsPagination.noConflict = function () {\n        $.fn.twbsPagination = old;\n        return this;\n    };\n\n})(window.jQuery, window, document);\n"],"sourceRoot":"/source/"}